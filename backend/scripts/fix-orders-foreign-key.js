const mysql = require('mysql2/promise');
require('dotenv').config();

// Configuraci√≥n espec√≠fica para Railway
const dbConfig = {
  host: process.env.DB_HOST || 'mysql.railway.internal',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'railway',
  port: process.env.DB_PORT || 3306,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
};

// Funci√≥n para corregir la incompatibilidad de tipos
const fixOrdersForeignKey = async () => {
  let connection;
  
  try {
    console.log('üîß Corrigiendo incompatibilidad de tipos en tabla orders...');
    console.log('üìä Configuraci√≥n:', {
      host: dbConfig.host,
      user: dbConfig.user,
      database: dbConfig.database,
      port: dbConfig.port
    });
    
    // Conectar a la base de datos de Railway
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Conexi√≥n a MySQL de Railway establecida');
    
    // ========================================
    // PASO 1: Verificar tipos actuales
    // ========================================
    console.log('\nüîç PASO 1: Verificando tipos actuales...');
    
    // Verificar estructura de tabla users
    const [usersStructure] = await connection.query('DESCRIBE users');
    const userIdColumn = usersStructure.find(col => col.Field === 'id');
    console.log('üìã users.id:', userIdColumn ? userIdColumn.Type : 'NO ENCONTRADO');
    
    // Verificar estructura de tabla orders
    const [ordersStructure] = await connection.query('DESCRIBE orders');
    const orderUserIdColumn = ordersStructure.find(col => col.Field === 'user_id');
    console.log('üìã orders.user_id:', orderUserIdColumn ? orderUserIdColumn.Type : 'NO ENCONTRADO');
    
    if (!userIdColumn || !orderUserIdColumn) {
      console.log('‚ùå No se pudo verificar la estructura de las tablas');
      return false;
    }
    
    // ========================================
    // PASO 2: Corregir tipos de datos
    // ========================================
    console.log('\nüõ†Ô∏è  PASO 2: Corrigiendo tipos de datos...');
    
    try {
      // Eliminar la restricci√≥n de clave for√°nea existente
      console.log('üîß Eliminando restricci√≥n de clave for√°nea existente...');
      await connection.query('ALTER TABLE orders DROP FOREIGN KEY orders_ibfk_1');
      console.log('‚úÖ Restricci√≥n eliminada');
      
      // Modificar el tipo de user_id para que coincida con users.id
      console.log('üîß Modificando tipo de orders.user_id...');
      if (userIdColumn.Type.includes('bigint')) {
        await connection.query('ALTER TABLE orders MODIFY COLUMN user_id bigint(20) NULL');
        console.log('‚úÖ orders.user_id cambiado a bigint(20)');
      } else if (userIdColumn.Type.includes('int')) {
        await connection.query('ALTER TABLE orders MODIFY COLUMN user_id int(11) NULL');
        console.log('‚úÖ orders.user_id cambiado a int(11)');
      } else {
        console.log('‚ö†Ô∏è Tipo de users.id no reconocido:', userIdColumn.Type);
        return false;
      }
      
      // Recrear la restricci√≥n de clave for√°nea
      console.log('üîß Recreando restricci√≥n de clave for√°nea...');
      await connection.query(`
        ALTER TABLE orders ADD CONSTRAINT orders_ibfk_1 
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
      `);
      console.log('‚úÖ Restricci√≥n recreada exitosamente');
      
    } catch (error) {
      console.error('‚ùå Error en la correcci√≥n:', error.message);
      
      // Si falla, intentar la alternativa
      console.log('\nüîÑ Intentando alternativa...');
      return await tryAlternativeFix(connection, userIdColumn);
    }
    
    // ========================================
    // PASO 3: Verificar la correcci√≥n
    // ========================================
    console.log('\nüîç PASO 3: Verificando la correcci√≥n...');
    
    // Verificar que la restricci√≥n se cre√≥ correctamente
    const [constraints] = await connection.query(`
      SELECT 
        CONSTRAINT_NAME,
        COLUMN_NAME,
        REFERENCED_TABLE_NAME,
        REFERENCED_COLUMN_NAME
      FROM information_schema.KEY_COLUMN_USAGE 
      WHERE TABLE_SCHEMA = ? 
      AND TABLE_NAME = 'orders' 
      AND REFERENCED_TABLE_NAME IS NOT NULL
    `, [dbConfig.database]);
    
    console.log('üìã Restricciones de orders:');
    constraints.forEach(constraint => {
      console.log(`   ${constraint.CONSTRAINT_NAME}: ${constraint.COLUMN_NAME} -> ${constraint.REFERENCED_TABLE_NAME}.${constraint.REFERENCED_COLUMN_NAME}`);
    });
    
    // Verificar estructura final
    const [finalOrdersStructure] = await connection.query('DESCRIBE orders');
    const finalOrderUserIdColumn = finalOrdersStructure.find(col => col.Field === 'user_id');
    console.log('üìã Estructura final de orders.user_id:', finalOrderUserIdColumn ? finalOrderUserIdColumn.Type : 'NO ENCONTRADO');
    
    // ========================================
    // PASO 4: Verificaci√≥n final
    // ========================================
    console.log('\nüîç PASO 4: Verificaci√≥n final...');
    
    // Probar que la restricci√≥n funciona
    const [typeComparison] = await connection.query(`
      SELECT 
        'users.id' as tabla_columna,
        COLUMN_TYPE as tipo
      FROM information_schema.COLUMNS 
      WHERE TABLE_SCHEMA = ? 
      AND TABLE_NAME = 'users' 
      AND COLUMN_NAME = 'id'
      
      UNION ALL
      
      SELECT 
        'orders.user_id' as tabla_columna,
        COLUMN_TYPE as tipo
      FROM information_schema.COLUMNS 
      WHERE TABLE_SCHEMA = ? 
      AND TABLE_NAME = 'orders' 
      AND COLUMN_NAME = 'user_id'
    `, [dbConfig.database, dbConfig.database]);
    
    console.log('üìä Comparaci√≥n de tipos:');
    typeComparison.forEach(row => {
      console.log(`   ${row.tabla_columna}: ${row.tipo}`);
    });
    
    // Verificar compatibilidad
    const usersIdType = typeComparison.find(row => row.tabla_columna === 'users.id')?.tipo;
    const ordersUserIdType = typeComparison.find(row => row.tabla_columna === 'orders.user_id')?.tipo;
    
    if (usersIdType && ordersUserIdType) {
      if (usersIdType.includes('bigint') && ordersUserIdType.includes('bigint')) {
        console.log('‚úÖ Tipos compatibles: ambos son bigint');
      } else if (usersIdType.includes('int') && ordersUserIdType.includes('int')) {
        console.log('‚úÖ Tipos compatibles: ambos son int');
      } else {
        console.log('‚ö†Ô∏è Tipos pueden no ser completamente compatibles');
      }
    }
    
    console.log('\nüéâ ¬°Correcci√≥n aplicada exitosamente!');
    console.log('‚úÖ La restricci√≥n de clave for√°nea orders_ibfk_1 est√° funcionando');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Error aplicando correcci√≥n:', error);
    return false;
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå Conexi√≥n cerrada');
    }
  }
};

// Funci√≥n alternativa si la primera opci√≥n falla
const tryAlternativeFix = async (connection, userIdColumn) => {
  try {
    console.log('üîÑ Aplicando correcci√≥n alternativa...');
    
    // Eliminar todas las restricciones que dependan de users.id
    const constraintsToDrop = [
      'orders_ibfk_1',
      'surveys_created_by_fk',
      'surveys_closed_by_fk',
      'survey_options_created_by_fk',
      'survey_options_approved_by_fk',
      'survey_votes_user_fk'
    ];
    
    for (const constraint of constraintsToDrop) {
      try {
        await connection.query(`ALTER TABLE orders DROP FOREIGN KEY ${constraint}`);
        console.log(`‚úÖ Restricci√≥n ${constraint} eliminada`);
      } catch (error) {
        // La restricci√≥n puede no existir
        console.log(`‚ö†Ô∏è Restricci√≥n ${constraint} no existe o ya fue eliminada`);
      }
    }
    
    // Modificar users.id para que coincida con orders.user_id
    if (userIdColumn.Type.includes('bigint')) {
      await connection.query('ALTER TABLE users MODIFY COLUMN id int(11) NOT NULL AUTO_INCREMENT');
      console.log('‚úÖ users.id cambiado a int(11)');
    } else {
      await connection.query('ALTER TABLE users MODIFY COLUMN id bigint(20) NOT NULL AUTO_INCREMENT');
      console.log('‚úÖ users.id cambiado a bigint(20)');
    }
    
    // Recrear todas las restricciones
    console.log('üîß Recreando restricciones...');
    
    await connection.query(`
      ALTER TABLE orders ADD CONSTRAINT orders_ibfk_1 
      FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
    `);
    
    await connection.query(`
      ALTER TABLE surveys ADD CONSTRAINT surveys_created_by_fk 
      FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
    `);
    
    await connection.query(`
      ALTER TABLE surveys ADD CONSTRAINT surveys_closed_by_fk 
      FOREIGN KEY (closed_by) REFERENCES users(id) ON DELETE SET NULL
    `);
    
    await connection.query(`
      ALTER TABLE survey_options ADD CONSTRAINT survey_options_created_by_fk 
      FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
    `);
    
    await connection.query(`
      ALTER TABLE survey_options ADD CONSTRAINT survey_options_approved_by_fk 
      FOREIGN KEY (approved_by) REFERENCES users(id) ON DELETE SET NULL
    `);
    
    await connection.query(`
      ALTER TABLE survey_votes ADD CONSTRAINT survey_votes_user_fk 
      FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    `);
    
    console.log('‚úÖ Todas las restricciones recreadas');
    return true;
    
  } catch (error) {
    console.error('‚ùå Error en correcci√≥n alternativa:', error.message);
    return false;
  }
};

// Ejecutar si se llama directamente
if (require.main === module) {
  fixOrdersForeignKey()
    .then((success) => {
      if (success) {
        console.log('‚úÖ Script ejecutado exitosamente');
        process.exit(0);
      } else {
        console.log('‚ùå Script fall√≥');
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('‚ùå Error ejecutando script:', error);
      process.exit(1);
    });
}

module.exports = { fixOrdersForeignKey };
