const express = require('express');
const { testConnection } = require('../src/config/database');

async function checkServerStatus() {
  console.log('üîç VERIFICANDO ESTADO DEL SERVIDOR...');
  console.log('=====================================');
  
  try {
    // 1. Verificar conexi√≥n a la base de datos
    console.log('üì° Verificando conexi√≥n a la base de datos...');
    const dbConnected = await testConnection();
    
    if (dbConnected) {
      console.log('‚úÖ Base de datos conectada correctamente');
    } else {
      console.log('‚ùå Error conectando a la base de datos');
      return;
    }
    
    // 2. Verificar que las rutas est√°n configuradas correctamente
    console.log('\nüîç Verificando configuraci√≥n de rutas...');
    
    // Importar las rutas
    const authRoutes = require('../src/routes/auth');
    const publicProductRoutes = require('../src/routes/publicProducts');
    const productRoutes = require('../src/routes/products');
    const reservationRoutes = require('../src/routes/reservations');
    const surveyRoutes = require('../src/routes/surveys');
    const enhancedSurveyRoutes = require('../src/routes/enhancedSurveys');
    const statsRoutes = require('../src/routes/stats');
    const adminRoutes = require('../src/routes/admin');
    const orderRoutes = require('../src/routes/orders');
    const reportRoutes = require('../src/routes/reports');
    const unifiedCartRoutes = require('../src/routes/unifiedCart');
    
    console.log('‚úÖ Todas las rutas importadas correctamente');
    
    // 3. Verificar que los controladores est√°n disponibles
    console.log('\nüîç Verificando controladores...');
    
    const authController = require('../src/controllers/authController');
    const productController = require('../src/controllers/productController');
    const publicProductController = require('../src/controllers/publicProductController');
    
    if (authController.login && authController.register) {
      console.log('‚úÖ Controlador de autenticaci√≥n disponible');
    } else {
      console.log('‚ùå Controlador de autenticaci√≥n incompleto');
    }
    
    if (productController.getAllProducts) {
      console.log('‚úÖ Controlador de productos disponible');
    } else {
      console.log('‚ùå Controlador de productos incompleto');
    }
    
    // 4. Verificar middleware
    console.log('\nüîç Verificando middleware...');
    
    try {
      const { validate, loginSchema } = require('../src/middleware/validation');
      const { authenticateToken } = require('../src/middleware/auth');
      
      if (validate && loginSchema) {
        console.log('‚úÖ Middleware de validaci√≥n disponible');
      } else {
        console.log('‚ùå Middleware de validaci√≥n incompleto');
      }
      
      if (authenticateToken) {
        console.log('‚úÖ Middleware de autenticaci√≥n disponible');
      } else {
        console.log('‚ùå Middleware de autenticaci√≥n incompleto');
      }
    } catch (middlewareError) {
      console.log('‚ùå Error cargando middleware:', middlewareError.message);
    }
    
    // 5. Verificar configuraci√≥n de la aplicaci√≥n
    console.log('\nüîç Verificando configuraci√≥n de la aplicaci√≥n...');
    
    const app = express();
    
    // Registrar rutas de prueba
    app.use('/api/auth', authRoutes);
    app.use('/api/public/products', publicProductRoutes);
    app.use('/api/products', productRoutes);
    app.use('/api/unified-cart', unifiedCartRoutes);
    app.use('/api/reservations', reservationRoutes);
    app.use('/api/surveys', surveyRoutes);
    app.use('/api/enhanced-surveys', enhancedSurveyRoutes);
    app.use('/api/stats', statsRoutes);
    app.use('/api/admin', adminRoutes);
    app.use('/api/orders', orderRoutes);
    app.use('/api/reports', reportRoutes);
    
    console.log('‚úÖ Rutas registradas en la aplicaci√≥n de prueba');
    
    // 6. Verificar variables de entorno
    console.log('\nüîç Verificando variables de entorno...');
    
    const requiredEnvVars = [
      'DB_HOST',
      'DB_USER', 
      'DB_PASSWORD',
      'DB_NAME',
      'JWT_SECRET'
    ];
    
    const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);
    
    if (missingEnvVars.length === 0) {
      console.log('‚úÖ Todas las variables de entorno requeridas est√°n configuradas');
    } else {
      console.log('‚ùå Variables de entorno faltantes:', missingEnvVars.join(', '));
    }
    
    // 7. Verificar puerto
    const PORT = process.env.PORT || 8000;
    console.log(`üåê Puerto configurado: ${PORT}`);
    
    // 8. Verificar ambiente
    const NODE_ENV = process.env.NODE_ENV || 'development';
    console.log(`üåç Ambiente: ${NODE_ENV}`);
    
    console.log('\n=====================================');
    console.log('‚úÖ VERIFICACI√ìN COMPLETADA');
    console.log('\nüí° Si todo est√° correcto, el problema puede ser:');
    console.log('   - El servidor necesita reiniciarse');
    console.log('   - Hay un problema de despliegue');
    console.log('   - El c√≥digo no se ha sincronizado con el servidor');
    
  } catch (error) {
    console.error('‚ùå Error en la verificaci√≥n:', error);
    console.error('Stack trace:', error.stack);
  }
}

// Ejecutar la verificaci√≥n
checkServerStatus()
  .then(() => {
    console.log('\n‚úÖ Verificaci√≥n completada');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Error fatal en la verificaci√≥n:', error);
    process.exit(1);
  });
